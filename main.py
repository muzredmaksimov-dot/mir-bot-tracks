# main.py ‚Äî –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ü–∏—Ç–∞—Ç: —Ç–æ–ª—å–∫–æ –º–µ–º + —Ç—Ä–µ–∫
import os
import time
import random
import logging
import requests
from flask import Flask, request
import telebot
from telebot import types

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mood-bot-funny-no-quotes")

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise SystemExit("–£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")  # –µ—Å–ª–∏ —Ä–µ–ø–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ
GITHUB_OWNER = os.environ.get("GITHUB_OWNER", "muzredmaksimov-dot")
GITHUB_REPO = os.environ.get("GITHUB_REPO", "mir-bot-tracks")
GITHUB_BRANCH = os.environ.get("GITHUB_BRANCH", "main")

GITHUB_API_BASE = "https://api.github.com"
RAW_BASE = f"https://raw.githubusercontent.com/{GITHUB_OWNER}/{GITHUB_REPO}/{GITHUB_BRANCH}/"

bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# ========== –®—É—Ç–ª–∏–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞–ø–æ–∫ ==========
# key = mood id, value = (button label (funny), folder in repo)
MOODS = {
    "rave": ("üï∫ –Ø ‚Äî –¥–∏—Å–∫–æ—Ç–µ–∫–∞ –≤ —Ç–µ–ª–µ", "happy"),
    "zen": ("üßò‚ôÇÔ∏è –Ø —Å–¥–µ–ª–∞–ª —É—Ç—Ä–µ–Ω–Ω—é—é –π–æ–≥—É —Å —Ç–æ—Å—Ç–µ—Ä–æ–º", "calm"),
    "retro": ("üìº –ü–æ–π–¥—É –Ω–æ—Å—Ç–∞–ª—å–≥–∏—Ä–æ–≤–∞—Ç—å —Å –∫–∞—Å—Å–µ—Ç–æ–π", "nostalgia"),
    "turbo": ("‚ö° –Ø –∑–∞—Ä—è–¥–∏–ª—Å—è –∫–æ—Ñ–µ–∏–Ω–æ–º –∏ –º–æ–ª–æ–∫–æ–º", "energy"),
}

# ========== –ú–µ–º—ã (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ, –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ GitHub) ==========
MEMES = {
    "rave": ["https://i.imgur.com/QKp3F4S.jpeg"],
    "zen": ["https://i.imgur.com/hV6jZZD.jpeg"],
    "retro": ["https://i.imgur.com/JrVdJqV.jpeg"],
    "turbo": ["https://i.imgur.com/B4fYglz.jpeg"],
}

# ========== –ö—ç—à —Ç—Ä–µ–∫–æ–≤ ==========
TRACKS_CACHE = {}
CACHE_TTL = 60  # seconds

# ========== –ü–æ–º–æ—â–Ω–∏–∫–∏ GitHub ==========
def gh_headers():
    headers = {"Accept": "application/vnd.github+json"}
    if GITHUB_TOKEN:
        headers["Authorization"] = f"token {GITHUB_TOKEN}"
    return headers

def fetch_tracks_for_folder(folder_name):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ {name, download_url} –∏–∑ tracks/<folder_name>.
    –ö—ç—à–∏—Ä—É–µ—Ç –Ω–∞ CACHE_TTL —Å–µ–∫—É–Ω–¥.
    """
    now = time.time()
    cached = TRACKS_CACHE.get(folder_name)
    if cached and now - cached["ts"] < CACHE_TTL:
        return cached["tracks"]

    api_url = f"{GITHUB_API_BASE}/repos/{GITHUB_OWNER}/{GITHUB_REPO}/contents/tracks/{folder_name}"
    params = {"ref": GITHUB_BRANCH}
    r = requests.get(api_url, headers=gh_headers(), params=params, timeout=10)
    if r.status_code == 404:
        raise FileNotFoundError(f"Folder tracks/{folder_name} not found")
    r.raise_for_status()
    items = r.json()
    tracks = []
    for it in items:
        if it.get("type") == "file" and it.get("name", "").lower().endswith((".mp3", ".m4a", ".ogg", ".wav")):
            tracks.append({"name": it["name"], "download_url": it.get("download_url")})
    TRACKS_CACHE[folder_name] = {"ts": now, "tracks": tracks}
    return tracks

def pick_random_track(folder_name):
    tracks = fetch_tracks_for_folder(folder_name)
    if not tracks:
        return None
    return random.choice(tracks)

# ========== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ==========
def mood_keyboard():
    kb = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for key, (label, folder) in MOODS.items():
        buttons.append(types.InlineKeyboardButton(label, callback_data=f"mood:{key}"))
    kb.add(*buttons)
    return kb

# ========== –•—ç–Ω–¥–ª–µ—Ä—ã ==========
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    intro = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞.\n"
        "–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî –∏ –ø–æ–ª—É—á–∏—à—å:\n"
        "1) –ú–µ–º –¥–Ω—è\n2) –¢—Ä–µ–∫ –¥–Ω—è\n\n–ù–∞–∂–∏–º–∞–π –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:"
    )
    bot.send_message(msg.chat.id, intro, reply_markup=mood_keyboard())

@bot.message_handler(commands=["help"])
def cmd_help(msg):
    bot.reply_to(msg, "–ù–∞–∂–º–∏ /start ‚Üí –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É. –Ø –ø—Ä–∏—à–ª—é –º–µ–º –∏ —Ç—Ä–µ–∫ –¥–Ω—è.")

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("mood:"))
def on_mood_selected(call: types.CallbackQuery):
    try:
        mood_key = call.data.split(":", 1)[1]
        if mood_key not in MOODS:
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
            return
        label, folder = MOODS[mood_key]
        bot.answer_callback_query(call.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {label}")

        # –ó–∞–±–∞–≤–Ω—ã–π –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        funny_intro = random.choice([
            "–ü–æ–¥–±–∏—Ä–∞—é –º–µ–º—ã –∏ —Ç—Ä–µ–∫–∏... –¥–µ—Ä–∂–∏—Å—å –∫—Ä–µ–ø—á–µ!",
            "–°–æ–±–∏—Ä–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —Ç–≤–æ–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.",
            "–ó–∞–ª–µ–∑–∞—é –≤ —Å—É–Ω–¥—É–∫ —Å –º–µ–º–∞–º–∏... –Ω–∞—à—ë–ª –ø–∞—Ä–æ—á–∫—É!"
        ])
        bot.send_message(call.message.chat.id, f"üîä {funny_intro}")

        time.sleep(0.5)

        # 1) –ú–µ–º
        meme = random.choice(MEMES.get(mood_key, ["https://i.imgur.com/QKp3F4S.jpeg"]))
        try:
            bot.send_photo(call.message.chat.id, meme, caption="üòÇ –ú–µ–º –¥–Ω—è")
        except Exception as e:
            logger.warning("send_photo failed: %s", e)
            bot.send_message(call.message.chat.id, "üòÇ –ú–µ–º –¥–Ω—è (—Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")

        time.sleep(0.4)

        # 2) –¢—Ä–µ–∫ ‚Äî –±–µ—Ä–µ–º –∏–∑ GitHub
        try:
            track = pick_random_track(folder)
            if not track:
                bot.send_message(call.message.chat.id, "üéß –¢—Ä–µ–∫ –¥–Ω—è: –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
                return
            name = track["name"]
            url = track["download_url"] or (RAW_BASE + f"tracks/{folder}/{name}")

            track_intro = random.choice([
                "–í–æ—Ç —Ç—Ä–µ–∫ ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–ª—É—à–∞—Ç—å –≤ –Ω–∞—É—à–Ω–∏–∫–∞—Ö.",
                "–¢—Ä–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —è –±—ã –ø–æ—Å—Ç–∞–≤–∏–ª –Ω–∞ –ø–æ–≤—Ç–æ—Ä.",
                "–ì–æ—Ç–æ–≤—å—Å—è –ø–æ–¥–ø–µ–≤–∞—Ç—å!"
            ])
            bot.send_message(call.message.chat.id, f"üéß *–¢—Ä–µ–∫ –¥–Ω—è:* *{name}*\n{url}\n\n_{track_intro}_", parse_mode="Markdown")

            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            try:
                bot.send_audio(call.message.chat.id, url)
            except Exception as e:
                logger.info("send_audio skipped/fallback: %s", e)

        except FileNotFoundError:
            bot.send_message(call.message.chat.id, "üéß –¢—Ä–µ–∫ –¥–Ω—è: –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–µ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.")
        except requests.HTTPError:
            logger.exception("GitHub HTTP error")
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤ —Å GitHub.")
        except Exception:
            logger.exception("Unexpected error while fetching track")
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ —Ç—Ä–µ–∫–∞.")
    except Exception:
        logger.exception("Error in callback handler")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# ========== Flask webhook ==========
@app.route(f"/webhook/{TOKEN}", methods=["POST"])
def webhook_route():
    if request.headers.get("content-type") == "application/json":
        update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
        bot.process_new_updates([update])
        return ""
    return "Bad Request", 400

@app.route("/")
def index():
    return "Mood-bot (funny, no quotes) running"

@app.route("/health")
def health():
    return "OK"

# ========== –ó–∞–ø—É—Å–∫ ==========
if __name__ == "__main__":
    logger.info("Starting bot (no quotes)")
    if "RENDER" in os.environ:
        PORT = int(os.environ.get("PORT", 8080))
        try:
            bot.remove_webhook()
            time.sleep(0.5)
            # –ó–∞–º–µ–Ω–∏—Ç–µ YOUR-RENDER-URL –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Render
            bot.set_webhook(url=f"https://YOUR-RENDER-URL.onrender.com/webhook/{TOKEN}")
            logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: %s", e)
        app.run(host="0.0.0.0", port=PORT)
    else:
        bot.remove_webhook()
        bot.polling(none_stop=True)
