import os
import time
import random
import requests
from io import BytesIO
from flask import Flask, request
import telebot
from telebot import types

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# --- –ú–µ–º—ã —á–µ—Ä–µ–∑ meme-api ---
def get_meme():
    subs = ['memes', 'funny', 'dankmemes', 'wholesomememes']
    subreddit = random.choice(subs)
    url = f'https://meme-api.com/gimme/{subreddit}'
    try:
        res = requests.get(url, timeout=5)
        if res.status_code == 200:
            data = res.json()
            return data.get('url')
    except Exception:
        pass
    return None

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–∫–∞ –∫–∞–∫ —Ñ–∞–π–ª–∞ ---
def send_track_file(chat_id, track_url):
    try:
        res = requests.get(track_url, stream=True)
        if res.status_code == 200:
            file_like = BytesIO(res.content)
            filename = track_url.split('/')[-1]
            bot.send_document(chat_id, types.InputFile(file_like, filename))
        else:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫ üòÖ")
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞: {e}")

# --- –°—Ç–∞—Ä—Ç –∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ---
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("üòé –ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –∫–∞–∫ —Ä–æ–∫-–∑–≤–µ–∑–¥–∞"),
        types.KeyboardButton("ü•± –õ–µ–Ω—å –∏ –∫–æ—Ñ–µ ‚Äî –º–æ–∏ –¥—Ä—É–∑—å—è"),
        types.KeyboardButton("ü§° –í—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É (–Ω–æ –Ω–µ—Ç)"),
        types.KeyboardButton("üî• –ú–∏—Ä —Å–ø–∞—Å–∞—Ç—å –Ω–µ —Å–æ–±–∏—Ä–∞—é—Å—å, –Ω–æ –ø–æ–ø—Ä–æ–±—É—é")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üòè", reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ---
@bot.message_handler(func=lambda m: True)
def mood_handler(message):
    chat_id = message.chat.id

    # –ú–µ–º –¥–Ω—è
    meme_url = get_meme()
    if meme_url:
        bot.send_photo(chat_id, meme_url, caption="üß† –ú–µ–º –¥–Ω—è:")

    # –¢—Ä–µ–∫ –¥–Ω—è (–ø—Ä–∏–º–µ—Ä: –∏–∑ GitHub raw)
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–ø–æ
    track_map = {
        "üòé –ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –∫–∞–∫ —Ä–æ–∫-–∑–≤–µ–∑–¥–∞": "https://raw.githubusercontent.com/muzredmaksimov-dot/mir-bot-tracks/main/tracks/happy/track1.mp3",
        "ü•± –õ–µ–Ω—å –∏ –∫–æ—Ñ–µ ‚Äî –º–æ–∏ –¥—Ä—É–∑—å—è": "https://raw.githubusercontent.com/muzredmaksimov-dot/mir-bot-tracks/main/tracks/calm/track1.mp3",
        "ü§° –í—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É (–Ω–æ –Ω–µ—Ç)": "https://raw.githubusercontent.com/muzredmaksimov-dot/mir-bot-tracks/main/tracks/nostalgia/track1.mp3",
        "üî• –ú–∏—Ä —Å–ø–∞—Å–∞—Ç—å –Ω–µ —Å–æ–±–∏—Ä–∞—é—Å—å, –Ω–æ –ø–æ–ø—Ä–æ–±—É—é": "https://raw.githubusercontent.com/muzredmaksimov-dot/mir-bot-tracks/main/tracks/energy/track1.mp3",
    }
    track_url = track_map.get(message.text)
    if track_url:
        send_track_file(chat_id, track_url)
    else:
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π üòÖ")

# --- Flask webhook ---
@app.route(f'/webhook/{TOKEN}', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
        bot.process_new_updates([update])
        return ''
    return 'Bad Request', 400

@app.route('/')
def index():
    return 'Mood Music Bot running!'

@app.route('/health')
def health():
    return 'OK'

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    if 'RENDER' in os.environ:
        port = int(os.environ.get('PORT', 8080))
        try:
            bot.remove_webhook()
            time.sleep(1)
            bot.set_webhook(url=f"https://mir-bot-tracks.onrender.com/webhook/{TOKEN}")
        except Exception as e:
            print(f"‚ùå Webhook error: {e}")
        app.run(host='0.0.0.0', port=port)
    else:
        bot.remove_webhook()
        bot.polling(none_stop=True)
